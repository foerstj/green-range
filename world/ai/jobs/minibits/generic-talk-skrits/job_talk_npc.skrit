Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"


property    bool    face_player$    = true                  doc = "Face player when starting to talk";
property    string  talk_anim$      = "talk"                doc = "Animation during convo, like talk or look, or empty string";
property    bool    face_back$      = false                 doc = "Face back when talk is finished";


float actor_X$;
float actor_Y$;
float actor_Z$;
float actor_W$;


void animate$()
{
    if ( !StringTool.IsEmpty( talk_anim$ ) )
    {
        // need to translate from string to FourCC
        if ( StringTool.SameNoCase( talk_anim$, "talk" ) )
        {
            TryAnim$('talk');
        }
        if ( StringTool.SameNoCase( talk_anim$, "look" ) )
        {
            TryAnim$('look');
        }
        if ( StringTool.SameNoCase( talk_anim$, "wyme" ) )
        {
            TryAnim$('wyme');
        }
        if ( StringTool.SameNoCase( talk_anim$, "tak1" ) )
        {
            TryAnim$('tak1');
        }
        if ( StringTool.SameNoCase( talk_anim$, "tak2" ) )
        {
            TryAnim$('tak2');
        }
    }
    else
    {
        if ( m_Go$.Mind.ActorAutoFidgets )
        {
            StartFidgetIfRequired$();
        }
    }
}

startup state STARTUP$
{
}

event OnJobInit$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Target$	= job$.GoalObject;

    if ( face_player$ )
    {
        actor_X$ = m_go$.Placement.Orientation.x;
		actor_Y$ = m_go$.Placement.Orientation.y;
		actor_Z$ = m_go$.Placement.Orientation.z;
		actor_W$ = m_go$.Placement.Orientation.w;

		SetState Face$;
    }
    else
    {
        SetState Talk$;
    }
}

state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}

state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}

	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
        animate$();
	}

	event OnEnterState$
	{
		string red_con$ = MakeStringF( "%s_red", m_Go$.GetConversation.GetSelectedConversation );
		string directionsBool$ = MakeStringF( "d_0x%08x", m_Go$.Scid );

		if( GameAuditor.GetDb.GetBool( directionsBool$ ) )
		{
			GameAuditor.GetDb.SetBool( directionsBool$, false );
			// In multiplayer world, there will be a regionally global conversation (one for each region, instead of each actor)
			// which will give directions to nearby landmarks
			m_Go$.Conversation.RSSelectConversation( "zconversation_directions" ); //needs to alphabetically sort after all other conversations
		}
		else if( GameAuditor.GetDb.GetBool( "turn_world_red" ) )
		{
			m_Go$.Conversation.RSSelectConversation( red_con$ );
		}

		m_Go$.GetConversation.RSActivateDialogue();

        animate$();
	}
}

state Exiting$
{
	event OnEnterState$
	{
        if ( face_player$ )
        {
            MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );

            if ( face_back$ )
            {
                m_go$.Placement.SSetOrientation( MakeQuat( actor_X$, actor_Y$, actor_Z$, actor_W$));
            }
        }

		m_Job$.MarkForDeletion();
	}
}
