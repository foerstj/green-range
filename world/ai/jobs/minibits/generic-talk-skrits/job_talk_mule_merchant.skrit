Go			m_Go$;
GoMind		m_Mind$;
GoBody  	m_Body$;
Job			m_Job$;
Goid		m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"


property    string  namespace$  = "mule_merchant"   doc = "Namespace for conversations and flags";
property    bool    first$      = false             doc = "Whether to have a first conversation";
property    bool    numeric$    = false             doc = "Different conversation for each mule count";
property    bool    face_player$    = true                  doc = "Face player when starting to talk";
property    string  talk_anim$      = "talk"                doc = "Animation during convo: talk or look";


void animate$()
{
    if ( !StringTool.IsEmpty( talk_anim$ ) )
    {
        // need to translate from string to FourCC
        if ( StringTool.SameNoCase( talk_anim$, "talk" ) )
        {
            TryAnim$('talk');
        }
        if ( StringTool.SameNoCase( talk_anim$, "look" ) )
        {
            TryAnim$('look');
        }
        if ( StringTool.SameNoCase( talk_anim$, "wyme" ) )
        {
            TryAnim$('wyme');
        }
        if ( StringTool.SameNoCase( talk_anim$, "tak1" ) )
        {
            TryAnim$('tak1');
        }
        if ( StringTool.SameNoCase( talk_anim$, "tak2" ) )
        {
            TryAnim$('tak2');
        }
    }
    else
    {
        if ( m_Go$.Mind.ActorAutoFidgets )
        {
            StartFidgetIfRequired$();
        }
    }
}

startup state STARTUP$
{
}

event OnJobInit$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
	m_Target$	= job$.GoalObject;

    if ( face_player$ )
    {
        SetState Face$;
    }
    else
    {
        SetState Talk$;
    }
}

state Face$
{
	transition
	{
		-> Talk$:	OnWorldMessage( WE_MCP_FACING_LOCKEDON );
	}

	event OnEnterState$
	{
		MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, m_Target$ );
	}
}

state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}

	trigger OnWorldMessage$( WE_ANIM_DONE )
	{
        animate$();
	}

	event OnEnterState$
	{
		if ( first$ && !GameAuditor.GetDb.GetBool( namespace$ + "_talked_to" ) )
		{
			GameAuditor.GetDb.SetBool( namespace$ + "_talked_to", true );
			m_Go$.GetConversation.RSSelectConversation( namespace$ + "_first" );
		}
		else
		{
            int numMules$ = m_Go$.GetStore().GetNumHires();
			if ( numMules$ == 0 )
			{
				m_Go$.GetConversation.RSSelectConversation( namespace$ + "_no_packmules" );
			}
			else
			{
                if ( numeric$ )
                {
                    string muleConversation$;
                    StringTool.AssignF(muleConversation$, "%s_%d_packmules", namespace$, numMules$);
                    m_Go$.GetConversation.RSSelectConversation( muleConversation$ );
                }
                else
                {
                    m_Go$.GetConversation.RSSelectConversation( namespace$ + "_has_packmules" );
                }
			}
		}

		m_Go$.GetConversation.RSActivateDialogue();

        animate$();
	}
}

state Exiting$
{
	event OnEnterState$
	{
        if ( face_player$ )
        {
            MCPManager.MakeRequest( m_Go$.Goid, PL_FACE );
        }

		m_Job$.MarkForDeletion();
	}
}
